# 1,"89 55 24 40 43 48 53 55 59 41 33 31 22 32 42 42 40 51 32 38 48 60 73 60 67 80 87 134 178 186 180 180 174 172 151 116 68 70 68 90 75 64 83 97 99 83 72 73 76 43 25 36 44 51 56 57 51 33 31 26 30 35 37 40 47 42 25 34 46 62 58 59 62 65 91 167 196 186 184 185 193 194 173 139 91 74 61 66 84 68 82 95 109 93 80 63 55 42 39 31 35 50 53 46 37 26 22 26 28 32 35 34 35 27 24 29 49 53 52 61 59 62 134 192 192 196 200 201 200 196 186 159 115 83 65 57 70 78 82 89 105 101 91 78 53 48 48 37 35 43 38 28 28 26 23 21 19 26 27 35 35 33 23 32 46 44 48 57 48 88 157 173 185 188 195 193 192 192 192 171 138 100 66 55 55 77 85 86 84 92 66 69 50 50 48 48 51 41 33 32 37 27 21 15 20 25 38 35 33 32 19 31 45 38 47 48 49 137 172 173 176 179 180 182 184 178 179 176 160 142 81 53 52 61 91 98 85 91 75 53 51 50 47 48 43 37 34 32 33 24 12 21 23 24 30 26 30 25 20 33 36 32 50 39 82 166 172 180 183 184 184 184 185 179 174 175 166 172 115 56 45 51 71 85 80 82 78 47 41 39 35 35 24 23 22 21 18 18 20 23 21 19 15 13 15 18 28 22 17 24 36 40 125 171 174 172 179 180 182 184 182 178 179 176 168 163 141 69 29 33 51 64 65 60 57 40 45 38 41 28 29 25 21 15 17 17 23 20 23 18 13 17 18 29 25 19 21 32 35 75 163 179 176 182 188 190 186 185 182 181 182 177 176 166 160 109 39 27 42 65 63 60 46 43 44 45 29 24 23 22 15 20 18 21 24 18 15 11 15 19 27 23 14 21 23 29 39 123 176 173 179 188 189 189 185 185 182 183 178 177 178 165 155 148 71 19 28 57 62 58 45 29 45 38 29 21 17 18 22 19 28 22 20 12 13 18 20 23 27 15 15 23 25 27 75 154 168 170 178 187 189 189 186 187 186 186 182 177 171 166 161 153 118 37 23 44 73 59 45 24 38 33 28 19 21 21 19 23 25 18 13 9 17 18 18 21 19 19 22 23 24 40 121 159 165 169 176 184 185 191 187 190 190 191 190 184 179 169 161 147 139 77 28 36 71 67 37 35 31 24 22 22 17 17 22 22 15 15 8 15 20 16 17 20 16 17 18 21 32 76 151 157 162 164 172 179 184 187 185 186 188 186 183 177 173 163 155 150 137 92 37 32 52 79 43 29 25 20 25 21 21 26 21 12 14 13 13 18 13 16 21 20 18 17 21 30 49 128 155 155 159 162 168 164 143 116 121 142 159 164 162 155 155 161 161 157 146 117 55 35 41 73 72 30 20 26 28 29 30 21 14 10 12 15 17 17 16 22 24 19 16 20 31 43 98 154 153 155 156 159 132 89 72 107 151 175 177 177 167 159 167 181 171 156 149 134 70 38 35 59 83 49 32 37 36 26 30 23 10 18 24 28 24 18 24 35 29 17 28 56 73 96 148 156 151 158 158 129 84 69 116 157 167 184 189 184 187 177 168 171 182 175 164 150 88 54 39 41 74 66 37 40 34 21 27 14 18 29 32 34 36 31 23 26 41 49 77 106 116 141 148 149 155 159 155 107 78 114 155 158 161 167 174 174 181 198 190 164 168 182 171 158 104 58 39 36 63 70 39 38 37 23 20 17 20 31 35 42 55 57 50 55 66 77 104 120 130 156 157 160 159 140 116 101 126 147 122 84 74 72 71 78 82 116 146 173 158 172 180 162 128 66 38 43 52 54 45 42 37 18 27 19 17 34 42 65 62 52 55 72 88 86 90 105 125 152 157 161 154 142 123 130 138 91 53 65 62 44 50 66 75 50 86 152 164 180 177 163 143 87 44 41 51 60 44 38 34 23 31 18 12 29 41 37 51 81 44 37 42 54 84 104 111 131 148 173 181 179 146 126 102 62 65 130 119 81 98 112 135 149 156 151 169 180 174 168 152 114 61 39 57 71 38 38 37 22 27 22 8 13 26 28 42 84 70 46 38 25 35 63 105 154 166 181 183 182 159 128 118 96 95 108 117 126 152 174 182 181 164 176 186 179 171 168 158 140 86 52 45 81 31 37 35 16 24 17 7 17 41 57 57 61 76 79 88 84 108 100 117 149 159 175 193 180 171 172 151 145 144 144 152 159 170 174 178 176 169 173 181 181 178 169 160 157 94 84 38 85 29 37 32 14 17 9 12 33 74 91 118 131 138 145 152 145 159 153 147 175 168 176 185 178 178 179 163 142 141 139 144 159 161 162 165 171 169 174 182 178 179 166 160 162 105 104 62 74 30 33 19 6 10 4 6 27 97 104 126 142 150 157 161 151 156 157 153 174 182 178 176 174 173 174 173 169 157 154 156 162 161 171 178 183 173 175 182 178 180 169 161 164 125 98 90 49 27 30 18 3 14 10 1 12 93 105 117 130 139 146 160 153 153 165 176 181 189 190 189 179 178 180 185 180 171 171 170 170 180 186 191 190 175 176 185 183 183 170 160 169 143 92 94 38 27 27 18 4 11 6 7 13 97 129 147 158 159 157 162 155 154 168 181 184 196 199 205 198 192 191 186 179 173 174 173 177 190 193 198 192 177 179 189 186 185 176 162 162 145 101 105 70 19 14 8 5 3 3 6 7 92 134 150 160 162 161 158 153 135 153 173 179 192 195 196 190 180 153 150 168 170 178 174 180 186 190 193 185 179 179 178 178 174 171 164 152 144 110 93 85 22 15 16 10 8 8 7 0 80 135 150 159 163 164 159 154 121 167 181 184 191 194 198 186 184 174 123 142 168 172 172 178 180 183 181 185 183 181 179 178 177 172 166 157 145 117 83 96 20 23 21 15 6 5 10 0 73 132 149 157 161 161 156 146 137 170 182 191 189 191 199 191 191 192 150 98 151 164 171 169 171 173 177 176 173 177 178 173 175 167 165 150 137 133 87 106 21 25 31 22 8 6 11 2 51 131 147 157 157 157 148 142 150 157 181 190 188 193 194 193 196 195 175 113 105 154 161 168 165 165 171 168 168 171 176 167 169 161 157 143 133 137 96 87 23 23 29 29 15 11 12 3 30 118 141 152 156 159 144 133 142 156 170 177 190 188 186 200 203 188 163 162 98 122 159 159 160 159 165 169 168 171 167 164 164 154 151 143 139 138 116 74 18 28 24 32 18 14 11 2 7 100 134 146 153 153 142 87 100 139 150 164 171 173 174 150 115 114 132 169 136 85 133 154 158 160 158 159 163 161 160 161 159 150 142 143 139 134 128 85 15 28 24 29 21 17 10 6 0 60 130 139 145 147 128 71 88 116 131 144 158 145 107 65 68 112 160 153 156 112 94 134 150 155 153 155 157 157 159 157 156 151 145 141 140 135 123 108 17 17 26 24 27 20 14 6 2 16 113 132 137 139 109 71 97 107 112 114 131 104 93 130 161 163 148 149 154 152 102 100 134 146 151 153 156 158 158 157 154 146 143 143 139 131 120 112 28 22 28 23 24 23 20 6 13 3 75 122 132 140 107 85 108 114 114 118 121 123 148 160 147 149 153 160 160 167 154 104 106 138 155 159 155 166 165 164 162 155 143 139 139 128 120 118 33 38 26 22 30 36 33 11 9 2 38 115 123 140 113 99 118 120 119 119 118 122 138 142 154 179 175 174 180 177 174 161 112 121 152 164 155 167 174 172 167 151 139 149 148 138 121 109 33 34 15 26 42 37 33 21 6 3 11 102 123 131 115 105 120 122 121 113 131 160 164 171 172 174 165 170 175 176 172 168 156 118 146 157 156 168 174 172 162 145 150 156 151 142 124 98 34 29 16 19 28 29 21 14 7 6 0 74 132 134 118 104 119 112 111 116 147 166 165 144 130 134 120 121 127 130 153 170 160 138 139 161 153 170 175 172 157 149 146 147 140 124 105 77 37 29 18 25 37 31 34 25 20 11 0 42 129 127 111 103 112 90 92 99 109 109 126 112 101 112 112 115 132 132 108 125 140 146 145 159 155 171 174 171 160 152 154 153 143 121 96 56 43 27 19 26 38 36 30 28 23 11 2 18 112 120 123 113 120 87 55 129 124 116 120 122 136 152 167 178 178 184 122 55 98 156 153 153 159 171 174 172 161 152 156 152 133 107 71 48 42 29 22 22 39 38 27 30 24 11 6 4 89 128 126 109 119 91 17 128 172 170 169 169 192 216 192 190 174 178 150 103 141 174 159 146 157 172 172 172 163 148 151 142 118 89 54 51 43 37 25 20 42 43 26 33 26 9 7 0 63 138 129 102 109 104 31 42 154 157 178 168 177 192 169 191 200 190 186 146 169 175 172 148 144 176 170 170 167 146 135 124 103 70 59 50 44 39 34 21 31 38 26 28 19 11 7 1 32 124 119 92 104 107 57 51 130 136 150 148 145 150 169 177 187 181 164 154 174 172 175 161 134 174 168 166 168 148 115 97 84 67 50 43 49 41 37 34 38 30 17 21 32 17 7 7 7 87 128 105 112 119 110 120 148 154 160 156 154 162 157 175 181 173 164 158 158 167 170 166 132 167 163 164 163 142 111 91 75 54 47 42 51 49 39 42 52 44 32 33 32 19 10 8 0 47 135 117 110 119 105 120 138 142 148 144 138 152 144 155 170 157 154 150 164 164 160 159 135 164 154 163 153 127 111 106 78 64 54 44 48 37 41 40 42 31 26 27 18 15 11 8 5 8 95 132 114 111 104 102 111 119 123 121 117 119 123 136 145 156 165 171 169 164 159 149 148 154 138 151 125 107 102 86 61 57 36 33 46 37 48 46 43 27 27 16 18 14 10 7 6 3 35 125 140 109 116 122 123 120 118 123 128 136 146 155 166 170 167 164 165 166 161 158 156 141 142 130 100 97 98 79 57 40 22 26 60 53 51 48 36 32 31 21 22 15 10 6 8 9 2 62 137 117 113 129 143 156 159 156 164 162 164 165 166 167 164 167 165 169 168 164 150 127 143 109 96 107 106 84 52 26 22 27 57 54 39 42 28 37 35 25 20 12 11 5 8 9 7 6 87 115 119 131 147 155 162 165 169 168 168 173 172 172 171 169 166 167 160 157 126 135 116 99 110 122 100 68 35 23 23 18"
# read ../data/train.csv and display the first few rows

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import face_recognition

def load_data_with_face_filter(filepath):
    df = pd.read_csv(filepath)
    df['pixels'] = df['pixels'].apply(lambda x: np.fromstring(x, dtype=int, sep=' '))

    X = []
    y = []

    for index, row in df.iterrows():
        image = row['pixels'].reshape(48, 48).astype('uint8')
        # Use only HOG for faster processing; CNN can be used for higher accuracy at a higher computational cost
        face_locations_hog = face_recognition.face_locations(image, model="hog")
        face_locations_cnn = face_recognition.face_locations(image, model="cnn")
        face_locations = face_locations_hog + face_locations_cnn
        if len(face_locations) != 0:
            X.append(row['pixels'] / 255.0)  # Normalize pixel values
            y.append(row['emotion'])

    X = np.array(X).reshape(-1, 48, 48, 1)  # Reshape for CNN, 1 channel for grayscale
    y = to_categorical(y)  # One-hot encoding of labels
    return train_test_split(X, y, test_size=0.2, random_state=42)

# Load the training data
# train_data = load_data_with_face_filter('../data/train.csv')
train_data = pd.read_csv('../data/train.csv')

# describe data
print(train_data.describe())

# Display the first few rows of the DataFrame as pictures and label them according to emotion
# Define the emotion classes
emotion_classes = ['Angry', 'Disgust', 'Fear', 'Happy', 'Sad', 'Surprise', 'Neutral']
for i in range(22000):
    # if emotion is disgust:
    if train_data.iloc[i]['emotion'] == 3:
        pixels = train_data.iloc[i]['pixels']
        pixels = np.array(pixels.split(), dtype='uint8').reshape(48, 48)
        plt.imshow(pixels, cmap='gray')
        plt.title(emotion_classes[train_data.iloc[i]['emotion']])
        plt.show()



